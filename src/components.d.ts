/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AwCol {
    }
    interface AwComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface AwGrid {
    }
    interface AwImageGallery {
    }
    interface AwImageItem {
        "imageAlt"?: string;
        "imageHeight"?: string;
        "imageSrc": string;
        "imageWidth"?: string;
    }
    interface AwModal {
        "close": () => Promise<void>;
        /**
          * Indicates if the modal should have round borders
         */
        "noBorder"?: boolean;
        /**
          * Indicates if the modal should have a padding
         */
        "noPadding"?: boolean;
        "open": () => Promise<void>;
    }
    interface AwPdfReader {
        "pdfSrc": string;
        "workerSrc": string;
    }
    interface AwRow {
    }
}
declare global {
    interface HTMLAwColElement extends Components.AwCol, HTMLStencilElement {
    }
    var HTMLAwColElement: {
        prototype: HTMLAwColElement;
        new (): HTMLAwColElement;
    };
    interface HTMLAwComponentElement extends Components.AwComponent, HTMLStencilElement {
    }
    var HTMLAwComponentElement: {
        prototype: HTMLAwComponentElement;
        new (): HTMLAwComponentElement;
    };
    interface HTMLAwGridElement extends Components.AwGrid, HTMLStencilElement {
    }
    var HTMLAwGridElement: {
        prototype: HTMLAwGridElement;
        new (): HTMLAwGridElement;
    };
    interface HTMLAwImageGalleryElement extends Components.AwImageGallery, HTMLStencilElement {
    }
    var HTMLAwImageGalleryElement: {
        prototype: HTMLAwImageGalleryElement;
        new (): HTMLAwImageGalleryElement;
    };
    interface HTMLAwImageItemElement extends Components.AwImageItem, HTMLStencilElement {
    }
    var HTMLAwImageItemElement: {
        prototype: HTMLAwImageItemElement;
        new (): HTMLAwImageItemElement;
    };
    interface HTMLAwModalElement extends Components.AwModal, HTMLStencilElement {
    }
    var HTMLAwModalElement: {
        prototype: HTMLAwModalElement;
        new (): HTMLAwModalElement;
    };
    interface HTMLAwPdfReaderElement extends Components.AwPdfReader, HTMLStencilElement {
    }
    var HTMLAwPdfReaderElement: {
        prototype: HTMLAwPdfReaderElement;
        new (): HTMLAwPdfReaderElement;
    };
    interface HTMLAwRowElement extends Components.AwRow, HTMLStencilElement {
    }
    var HTMLAwRowElement: {
        prototype: HTMLAwRowElement;
        new (): HTMLAwRowElement;
    };
    interface HTMLElementTagNameMap {
        "aw-col": HTMLAwColElement;
        "aw-component": HTMLAwComponentElement;
        "aw-grid": HTMLAwGridElement;
        "aw-image-gallery": HTMLAwImageGalleryElement;
        "aw-image-item": HTMLAwImageItemElement;
        "aw-modal": HTMLAwModalElement;
        "aw-pdf-reader": HTMLAwPdfReaderElement;
        "aw-row": HTMLAwRowElement;
    }
}
declare namespace LocalJSX {
    interface AwCol {
    }
    interface AwComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface AwGrid {
    }
    interface AwImageGallery {
    }
    interface AwImageItem {
        "imageAlt"?: string;
        "imageHeight"?: string;
        "imageSrc": string;
        "imageWidth"?: string;
        /**
          * Event emitted on error with the image loading
         */
        "onImageItemError"?: (event: CustomEvent<void>) => void;
    }
    interface AwModal {
        /**
          * Indicates if the modal should have round borders
         */
        "noBorder"?: boolean;
        /**
          * Indicates if the modal should have a padding
         */
        "noPadding"?: boolean;
        /**
          * Event emitted when the modal is closed
         */
        "onModalClosed"?: (event: CustomEvent<boolean>) => void;
    }
    interface AwPdfReader {
        /**
          * Emitted when file finishes loading
         */
        "onPdfLoaded"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when file fails to load
         */
        "onPdfLoadingError"?: (event: CustomEvent<void>) => void;
        "pdfSrc": string;
        "workerSrc"?: string;
    }
    interface AwRow {
    }
    interface IntrinsicElements {
        "aw-col": AwCol;
        "aw-component": AwComponent;
        "aw-grid": AwGrid;
        "aw-image-gallery": AwImageGallery;
        "aw-image-item": AwImageItem;
        "aw-modal": AwModal;
        "aw-pdf-reader": AwPdfReader;
        "aw-row": AwRow;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "aw-col": LocalJSX.AwCol & JSXBase.HTMLAttributes<HTMLAwColElement>;
            "aw-component": LocalJSX.AwComponent & JSXBase.HTMLAttributes<HTMLAwComponentElement>;
            "aw-grid": LocalJSX.AwGrid & JSXBase.HTMLAttributes<HTMLAwGridElement>;
            "aw-image-gallery": LocalJSX.AwImageGallery & JSXBase.HTMLAttributes<HTMLAwImageGalleryElement>;
            "aw-image-item": LocalJSX.AwImageItem & JSXBase.HTMLAttributes<HTMLAwImageItemElement>;
            "aw-modal": LocalJSX.AwModal & JSXBase.HTMLAttributes<HTMLAwModalElement>;
            "aw-pdf-reader": LocalJSX.AwPdfReader & JSXBase.HTMLAttributes<HTMLAwPdfReaderElement>;
            "aw-row": LocalJSX.AwRow & JSXBase.HTMLAttributes<HTMLAwRowElement>;
        }
    }
}
